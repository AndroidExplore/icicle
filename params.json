{
  "name": "Icicle",
  "tagline": "An annotation based tool for saving and restoring instance states",
  "body": "Icicle\r\n========\r\n\r\n## Introduction\r\nSave and restore instance state just by annotating the fields you wish to save.\r\n\r\nWe all hate boilerplate codes right? We hate to have to do:\r\n\r\n```java\r\n@Override\r\nprotected void onSaveInstanceState(Bundle outState) {\r\n    outState.putString(AWESOME_STRING, mAwesomeString);\r\n    outState.putInt(AWESOME_INT, mAwesomeInt);\r\n    super.onSaveInstanceState(outState);\r\n}\r\n```\r\n\r\nAnd then have to do:\r\n\r\n```java\r\n@Override\r\npublic void onCreate(Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n\r\n    if (savedInstanceState != null) {\r\n        mAwesomeString = savedInstanceState.getString(AWESOME_STRING);\r\n        mAwesomeInt = savedInstanceState.getInt(AWESOME_INT);\r\n    }\r\n}\r\n```\r\n\r\nThis is familiar Right?\r\n\r\nIcicle does all the hard work for you. It **automagically** (I love that word too)\r\nsaves and restore your instance state.\r\n\r\n## What's new in version `1.0.0-alpha`\r\nPlease check the [Change Log](CHANGELOG.md) for what's new\r\n\r\n## Setting up\r\n\r\n  *  Add APT to your project-level `build.gradle` file\r\n\r\n```groovy\r\nbuildscript {\r\n    repositories {\r\n        jcenter() // Also available in maven central\r\n    }\r\n    dependencies {\r\n        ...\r\n        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'\r\n    }\r\n}\r\n```\r\n  * Add `icicle` and `icicle-processor` libraries to your app-module `build.gradle` file\r\n\r\n```groovy\r\napply plugin: 'com.neenbedankt.android-apt'\r\n\r\ndependencies {\r\n    apt 'com.segunfamisa:icicle-processor:1.0.0-alpha'\r\n    compile 'com.segunfamisa:icicle:1.0.0-alpha'\r\n}\r\n\r\n```\r\n\r\n## Usage\r\nUsing Icicle is simple. Annotate the field variables you wish to persist the state\r\nwith `@Freeze`, call `Icicle.freeze()`\r\nwhen you want to save, and call `Icicle.thaw()` when you wish to restore from the state.\r\n\r\n```java\r\n@Freeze\r\nint mAwesomeInt;\r\n\r\n@Freeze\r\nString mAwesomeString;\r\n\r\n@Override\r\npublic void onCreate(Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    Icicle.thaw(this, savedInstanceState);\r\n}\r\n\r\n@Override\r\nprotected void onSaveInstanceState(Bundle outState) {\r\n    Icicle.freeze(this, outState);\r\n    super.onSaveInstanceState(outState);\r\n}\r\n```\r\n\r\nNote: Icicle works only with non-private, non-final and non-static fields.\r\n\r\n\r\n## Contributing\r\nContributions are welcome. (Still drafting the rules for contributing)\r\n\r\n## License\r\n\r\n    Copyright 2016 Segun Famisa\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}